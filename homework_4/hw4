from unittest import *

def poly_hash(s, x=31, p=997):
    h = 0
    for j in range(len(s)-1, -1, -1):
        h = (h * x + ord(s[j]) + p) % p
    return h

def search_rabin_several_patterns(text, patterns):
    ###O(n*(m**n)*l)    n = количество pattern-ов, m = длина паттерна, l = длина текста
    indices = []
    x=31
    p=997

    for pattern in patterns:
        if len(text) < len(pattern):
            indices.append([])
        else:
            little_ind = []
            precomputed = [0] * (len(text) - len(pattern) + 1)
            precomputed[-1] = poly_hash(text[-len(pattern):], x, p)
        
            factor = 1
            for i in range(len(pattern)):
                factor = (factor*x + p) % p
            
            for i in range(len(text) - len(pattern)-1, -1, -1):
                precomputed[i] = (precomputed[i+1] * x + ord(text[i]) - factor * ord(text[i+len(pattern)]) + p) % p
        
            pattern_hash = poly_hash(pattern, x, p)
            for i in range(len(precomputed)):
                if precomputed[i] == pattern_hash:
                    if text[i: i + len(pattern)] == pattern:
                        little_ind.append(i)
            indices.append(little_ind)
    
    return indices

class SearchNaiveTest(TestCase):
    def setUp(self):
        self.search = search_rabin_several_patterns
        
    def test_empty(self):
        text = ''
        pattern = ['smth', '']
        self.assertEqual(self.search(text, pattern), [[], [0]])
        
    def test_big_pattern(self):
        text = 'blabla'
        pattern = ['bla', 'blablabla', 'blabla']
        self.assertEqual(self.search(text, pattern), [[0, 3], [], [0]])
        
    def test_count(self):
        text = 'Betty Botter bought some butter, \
            But, she said, the butter’s bitter. \
            If I put it in my batter, \
            It will make my batter bitter.'
        pattern = ['tt', 'but']
        indices = [[2, 8, 27, 66, 75, 113, 149, 156], [25, 64]]
        self.assertListEqual(self.search(text, pattern), indices)
        
case = SearchNaiveTest()
suite = TestLoader().loadTestsFromModule(case)
TextTestRunner().run(suite)
